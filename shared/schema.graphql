schema {
  query: Query
  mutation: Mutation
}

"Indicates exactly one field must be supplied and this field must not be `null`."
directive @oneOf on INPUT_OBJECT

type Query {
  firstUser: User
  oneVoting(id: ID!): Voting
  manyVoting(
    limit: Int
    paged: Int
    search: String
    isActive: Boolean
  ): [Voting!]!
  validateAuth(jwt: String!): JwtPayload
  checkAnswer(votingId: String!): Boolean!
}

type AuthSignInResult {
  jwt: String!
  user: JwtPayload!
}

type Mutation {
  deleteVoting(id: ID!): Boolean!
  completeVoting(id: ID!): Boolean!
  createVoting(input: CreateVotingInput!): Voting
  updateVoting(input: UpdateVotingInput!): Boolean
  authSignIn(input: AuthSignInInput!): AuthSignInResult
}

# ================== Inputs ================== #

input UpdateVotingInput {
  shortId: String!
  votingId: String!
  choiceName: String!
}

input CreateVotingInput {
  user: String!
  title: String!
  choices: [String!]!
  description: String
  isActive: Boolean
  finishIn: String
}

input AuthSignInInput {
  id: Int!
  hash: String!
  authDate: Int!
  username: String!
  lastName: String
  photoUrl: String
  firstName: String
}

# ================== Types ================== #

type JwtPayload {
  userId: String!
  telegramId: Int!
  username: String!
  firstName: String
  lastName: String
  avatarUrl: String
}

type User {
  id: ID!
  login: String!
  email: String
  createdAt: String!
  updatedAt: String!
  profile: Profile
}

type Profile {
  id: ID!
  telegramId: Int
  firstName: String
  lastName: String
  avatarUrl: String
  createdAt: String!
  updatedAt: String!
  userId: String!
}

type DateTime {
  iso: String!
  date: String!
  time: String!
  gmt: String!
  pretty: String!
}

type Voting {
  id: ID!
  shortId: String!
  title: String!
  description: String
  isActive: Boolean!
  finishIn: String
  createdAt: DateTime!
  updatedAt: DateTime!
  authorId: String!
  author: User!
  choices: [Choice!]
  votesNumber: Int!
}

type Choice {
  id: ID!
  label: String!
  value: String!
  votes: Int!
  createdAt: String!
  updatedAt: String!
  votingId: ID!
}

type Answer {
  id: ID!
  userId: String!
  votingId: String!
  choiceId: String!
  createdAt: String!
}

# ================== Enums ================== #

enum AllowedColor {
  RED
  GREEN
  BLUE
}