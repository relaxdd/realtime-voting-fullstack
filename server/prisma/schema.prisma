generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["relationJoins", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("PGSQL_URL")
  extensions = [pgcrypto]
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()

  login    String  @unique @db.VarChar(191)
  password String? @db.VarChar(255)
  email    String? @db.VarChar(191)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  profile Profile?
  votings Voting[]
  answers Answer[]

  @@map("users")
}

model Profile {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()

  telegramId Int?    @unique @map("telegram_id")
  username   String? @db.VarChar(191)
  firstName  String? @map("first_name") @db.VarChar(191)
  lastName   String? @map("last_name") @db.VarChar(191)
  avatarUrl  String? @map("avatar_url") @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  userId String @unique @map("user_id") @db.Uuid()
  user   User   @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Voting {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()

  shortId     String    @db.VarChar(20)
  title       String    @db.VarChar(191)
  description String?   @db.Text
  isActive    Boolean   @default(true) @db.Boolean
  finishIn    DateTime? @map("finish_in")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  userId String @map("user_id") @db.Uuid()
  user   User   @relation(fields: [userId], references: [id])

  choices Choice[]
  answers Answer[]

  @@map("voting")
}

model Choice {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()

  label String
  value String
  votes Int    @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  votingId String @map("voting_id") @db.Uuid()
  voting   Voting @relation(fields: [votingId], references: [id])

  answers Answer[]

  @@map("choices")
}

model Answer {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  votingId String @map("voting_id") @db.Uuid
  voting   Voting @relation(fields: [votingId], references: [id])

  choiceId String @map("choice_id") @db.Uuid
  choice   Choice @relation(fields: [choiceId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("answers")
}
